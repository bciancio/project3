{"version":3,"sources":["GitHubBornOn.js","App.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["GitHubBornOn","useState","userData","updateUserData","userName","input","a","API","get","data","console","log","user","useEffect","fetchBornOnDate","login","created_at","App","coins","updateCoins","limit","start","updateInput","updateInputValues","type","value","fetchCoins","className","onChange","e","target","placeholder","onClick","map","coin","index","name","symbol","price_usd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAIaA,EAAe,WACxB,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAiBC,EAAjB,KAGA,EAAgCF,mBAAS,CAAEG,SAAU,aAArD,mBAAOC,EAAP,UAJ8B,4CAW9B,8BAAAC,EAAA,6DACYF,EAAaC,EAAbD,SADZ,SAEuBG,IAAIC,IAAI,YAAR,yBAAuCJ,IAF9D,OAEUK,EAFV,OAGIC,QAAQC,IAAI,0EAAiEF,GAC7EN,EAAeM,EAAKG,MAJxB,4CAX8B,sBA0B9B,OApBAC,qBAAU,YANoB,mCAO1BC,KACD,IAkBI,qCACFZ,EAASa,MADP,mBAC8Bb,EAASc,e,OC0BnCC,MAhDf,WAEE,MAA6BhB,mBAAS,IAAtC,mBAAOiB,EAAP,KAAcC,EAAd,KAEA,EAA6BlB,mBAAS,CAAEmB,MAAO,EAAGC,MAAO,IAAzD,mBAAOhB,EAAP,KAAciB,EAAd,KAQA,SAASC,EAAkBC,EAAMC,GAC/BH,EAAY,2BAAKjB,GAAN,kBAAcmB,EAAOC,KAbrB,SAiBEC,IAjBF,2EAiBb,gCAAApB,EAAA,6DACUc,EAAiBf,EAAjBe,MAAOC,EAAUhB,EAAVgB,MADjB,SAEqBd,IAAIC,IAAI,YAAR,uBAAqCY,EAArC,kBAAoDC,IAFzE,OAEQZ,EAFR,OAGEU,EAAYV,EAAKS,OAHnB,4CAjBa,sBAuBb,OAhBAL,qBAAU,WACRa,MACC,IAeD,sBAAKC,UAAU,MAAf,UACE,uBACEC,SAAU,SAAAC,GAAC,OAAIN,EAAkB,QAASM,EAAEC,OAAOL,QACnDM,YAAY,UAEd,uBACEA,YAAY,QACZH,SAAU,SAAAC,GAAC,OAAIN,EAAkB,QAASM,EAAEC,OAAOL,UAErD,wBAAQO,QAASN,EAAjB,yBAEER,EAAMe,KAAI,SAACC,EAAMC,GAAP,OACR,gCACE,+BAAKD,EAAKE,KAAV,MAAmBF,EAAKG,UACxB,mCAAMH,EAAKI,eAFHH,MAOd,cAAC,EAAD,QCxCSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCQCQ,EAZG,CACd,mBAAsB,YACtB,uBAA0B,CACtB,CACI,KAAQ,YACR,SAAY,6DACZ,OAAU,e,MCDtBC,QAAQC,UAAUC,GAGlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.92c4147b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n// Import the API category from AWS Amplify\nimport { API } from 'aws-amplify'\n\nexport const GitHubBornOn = () => {\n    const [userData, updateUserData] = useState([])\n\n    // Create additional state to hold user input for limit and start properties\n    const [input, updateUserName] = useState({ userName: 'bciancio' })\n\n    useEffect(() => {\n        fetchBornOnDate()\n    }, [])\n\n\n    async function fetchBornOnDate() {\n        const { userName } = input\n        const data = await API.get('cryptoapi', `/born?username=${userName}`)\n        console.log(\"ðŸš€ ~ file: GitHubBornOn.js ~ line 19 ~ fetchBornOnDate ~ data\", data)\n        updateUserData(data.user)\n    }\n\n\n    // {Object.keys(userData).map((element) => {\n    //     return (\n    //         <div key={element}>\n    //             {element} : {userData[element]}\n    //         </div>\n    //     )\n    // })}\n    return <>\n        {userData.login} was created on {userData.created_at}\n    </>\n}","// Import useState and useEffect hooks from React\nimport React, { useState, useEffect } from 'react'\nimport { GitHubBornOn } from './GitHubBornOn';\n\n// Import the API category from AWS Amplify\nimport { API } from 'aws-amplify'\n\nimport './App.css';\n\nfunction App() {\n  // Create coins variable and set to empty array\n  const [coins, updateCoins] = useState([])\n  // Create additional state to hold user input for limit and start properties\n  const [input, updateInput] = useState({ limit: 5, start: 0 })\n\n  // Call fetchCoins function when component loads\n  useEffect(() => {\n    fetchCoins()\n  }, [])\n\n  // Create a new function to allow users to update the input values\n  function updateInputValues(type, value) {\n    updateInput({ ...input, [type]: value })\n  }\n\n  // Update fetchCoins function to use limit and start properties\n  async function fetchCoins() {\n    const { limit, start } = input\n    const data = await API.get('cryptoapi', `/coins?limit=${limit}&start=${start}`)\n    updateCoins(data.coins)\n  }\n\n  return (\n    <div className=\"App\">\n      <input\n        onChange={e => updateInputValues('limit', e.target.value)}\n        placeholder=\"limit\"\n      />\n      <input\n        placeholder=\"start\"\n        onChange={e => updateInputValues('start', e.target.value)}\n      />\n      <button onClick={fetchCoins}>Fetch Coins</button>\n      {\n        coins.map((coin, index) => (\n          <div key={index}>\n            <h2>{coin.name} - {coin.symbol}</h2>\n            <h5>${coin.price_usd}</h5>\n          </div>\n        ))\n      }\n\n      <GitHubBornOn />\n    </div>\n  );\n}\n\nexport default App\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"cryptoapi\",\n            \"endpoint\": \"https://n9dtrunsak.execute-api.us-east-2.amazonaws.com/dev\",\n            \"region\": \"us-east-2\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\n\nAmplify.configure(config)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}